####################################################################################################
#
# Use this file to setup envirionment variable to run WAC applications
#
# The build is controlled by cmake and make. Both are needed for this to work.
#
# The following directory structure is assumed/build
#
#  'pwd'                   : Current directory
#  'pwd'/bin               : Where cmake & make will install binaries
#  'pwd'/build             : Where cmake & make will compile&build APPs
#  'pwd'/data              : data read/written by WAC executables and MACROs
#  'pwd'/data/inputHistos  : For input (histogram) root files. Accessible as root::getenv("WAC_INPUT_PATH");
#  'pwd'/data/outputHistos : For ouput (histogram) root files. Accessible as root::getenv("WAC_OUTPUT_PATH");
#  'pwd'/data/repository   : For repo  (histogram) root files. Accessible as root::getenv("WAC_REPOSITORY_PATH");
#  'pwd'/data/figures      : For PDF output. Accessible as root::getenv("WAC_FIGURES_PATH");
#  'pwd'/documentation     : documentation output (DOXYGEN)
#  'pwd'/lib               : Where cmake & make will install libraries
#  'pwd'/src               : Source code main directory
#  'pwd'/src/AMPT          : Code to read AMPT events.
#  'pwd'/src/Base          : Base classes of the WAC framework.
#  'pwd'/src/Blastwave     : Classes to simulate Blastwave (depracated, use Base/BWGenerator).
#  'pwd'/src/Cluster       : Original "cluster" code (depracated).
#  'pwd'/src/EOS           : Configuration file for the Hadron Gas module.
#  'pwd'/src/Epos          : Code to read EPOS events.
#  'pwd'/src/HadronGas     : Code to carry out hadron gas calculation and event generation.
#  'pwd'/src/Music         : Code to read MUSIC events.
#  'pwd'/src/StatStudies   : Code to carry various stat studies.
#  'pwd'/src/Urqmd         : Code to read UrQMD events.
#  'pwd'/src/WacPythia     : Code to read or produce PYTHIA events.
#
####################################################################################################
echo "========================================================================================"
echo "Creating (if needed) build, InputFiles, and OutputFiles directories"
if [[ ! (-d build) ]] then
  mkdir build;
fi
if [[ ! (-d lib) ]] then
  mkdir lib;
fi
if [[ ! (-d bin) ]] then
  mkdir bin;
fi
if [[ ! (-d data) ]] then
  mkdir data;
fi
if [[ ! (-d data/InputFiles) ]] then
  mkdir data/InputFiles;
fi
if [[ ! (-d data/OutputFiles) ]] then
  mkdir data/OutputFiles;
fi
if [[ ! (-d data/Repository) ]] then
  mkdir data/Repository;
fi

echo "========================================================================================"
echo "Setting up WAC environment variables"
echo "========================================================================================"
###    export ROOT_SELECTED_VERSION="/usr/local/Cellar/root/6.22.06_2"
export ROOT_SELECTED_VERSION="/Users/claudeapruneau/Documents/GitHub/root/root_install"
export ROOT_LIBS="$ROOT_SELECTED_VERSION/lib/"
export WAC_LARGE_DATA="/Volumes/ClaudeDisc4/"
export WAC_ROOT=`pwd`
export WAC_SRC="$WAC_ROOT/src/"
export WAC_BIN="$WAC_ROOT/bin/"
export WAC_LIB="$WAC_ROOT/lib/"
export WAC_DATA="$WAC_ROOT/data/"
export WAC_INPUT_PATH="$WAC_DATA/inputHistos/"
export WAC_OUTPUT_PATH="$WAC_DATA/outputHistos/"
export WAC_REPOSITORY_PATH="$WAC_DATA/repository/"
export WAC_FIGURES_PATH="$WAC_DATA/figures/"
export PATH="$WAC_BIN:$PATH"
export DYLD_LIBRARY_PATH="$WAC_LIB:$DYLD_LIBRARY_PATH"
export LD_LIBRARY_PATH="$WAC_LIB:$LD_LIBRARY_PATH"
export WAC_INPUT_PATH="$WAC_DATA/InputFiles/"
export WAC_OUTPUT_PATH="$WAC_DATA/OutputFiles/"
export WAC_REPOSITORY_PATH="$WAC_DATA/Repository/"
echo "All done"
echo "========================================================================================"
